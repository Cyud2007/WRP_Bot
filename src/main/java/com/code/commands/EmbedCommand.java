package com.code.commands;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Role;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.interactions.components.text.TextInput;
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle;
import net.dv8tion.jda.api.interactions.modals.Modal;
import net.dv8tion.jda.api.interactions.modals.ModalMapping;

public class EmbedCommand {
    String probel = " ";
    private static final String DATA_FILE = "countrydata.txt";
    private static final AtomicInteger requestCounter = new AtomicInteger(1);
    private final String targetChannelId = "1273338936177197138";
    private final String roleId = "1274822435597717565";

    private final Map<String, String> requestStates = new ConcurrentHashMap<>();

    public EmbedCommand() {
        loadRequestCounter();
    }

    private void loadRequestCounter() {
        try (BufferedReader reader = new BufferedReader(new FileReader(DATA_FILE))) {
            String line = reader.readLine();
            if (line != null) {
                requestCounter.set(Integer.parseInt(line));
            }
        } catch (IOException e) {
            System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫: " + e.getMessage());
        }
    }

    private void saveRequestCounter() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(DATA_FILE))) {
            writer.write(String.valueOf(requestCounter.get()));
        } catch (IOException e) {
            System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫: " + e.getMessage());
        }
    }

    private boolean isUserAlreadyRegistered(Guild guild, User user) {
        Member member = guild.getMember(user);
        return member != null && member.getRoles().stream().anyMatch(role -> role.getId().equals(roleId));
    }

    public void execute(MessageReceivedEvent event) {
        if (event.getMessage().getContentRaw().equalsIgnoreCase("!embed")) {
            EmbedBuilder embed = new EmbedBuilder();
            embed.setTitle("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –°—Ç—Ä–∞–Ω—É");
            embed.setDescription("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è");
            embed.setColor(Color.BLUE);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤ –∫–∞–Ω–∞–ª
            event.getChannel().sendMessageEmbeds(embed.build())
                    .setActionRow(Button.primary("send_request_button", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"))
                    .queue();
        }
    }

    public void onButtonInteraction(ButtonInteractionEvent event) {
        if (event.getComponentId().equals("send_request_button")) {
            // –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–ø—É—Ç –¥–ª—è –≤–≤–æ–¥–∞ –µ–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä–∞–Ω—ã
      
            
            TextInput countryInput = TextInput.create("country_input", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É", TextInputStyle.SHORT)
                    .setPlaceholder("–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–º–µ—Ä–∏–∫–∞")
                    .setRequired(true)
                    .build();

                    TextInput emojiInput = TextInput.create("emoji_input", "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –µ–º–æ–¥–∑–∏", TextInputStyle.SHORT)
                    .setPlaceholder("–ù–∞–ø—Ä–∏–º–µ—Ä: üá∫üá∏")
                    .setRequired(true)
                    .build();

            // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            Modal modal = Modal.create("request_modal", "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏")
                    .addActionRow(countryInput)
                    .addActionRow(emojiInput)
                    .build();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            event.replyModal(modal).queue();
        } else if (event.getComponentId().startsWith("reject_request_button")) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            String requestId = event.getComponentId().split(":")[1];
            String userId = event.getComponentId().split(":")[2];

            TextInput rejectReasonInput = TextInput.create("reject_reason_input", "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", TextInputStyle.PARAGRAPH)
                    .setPlaceholder("–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º...")
                    .setRequired(true)
                    .build();

            Modal rejectModal = Modal.create("reject_reason_modal:" + requestId + ":" + userId, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")
                    .addActionRow(rejectReasonInput)
                    .build();

            event.replyModal(rejectModal).queue();
        }
    }

    public void onModalInteraction(ModalInteractionEvent event) {
        String modalId = event.getModalId();

        if (modalId.startsWith("request_modal")) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
        
            ModalMapping countryMapping = event.getValue("country_input");
            ModalMapping emojiMapping = event.getValue("emoji_input");
            if (emojiMapping == null || countryMapping == null) {
                event.reply("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –µ–º–æ–¥–∑–∏ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É.").setEphemeral(true).queue();
                return;
            }
         
            String country = countryMapping.getAsString();
            String emoji = emojiMapping.getAsString();

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É
            User user = event.getUser();

            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
            int requestNumber = requestCounter.getAndIncrement();
            saveRequestCounter();

            // –°–æ–∑–¥–∞—ë–º Embed —Å–æ–æ–±—â–µ–Ω–∏–µ
            EmbedBuilder embed = new EmbedBuilder();
            embed.setTitle("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é");
            embed.setDescription(String.format("*%s* —Ö–æ—á–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω—É: *%s * + probel + *%s*", user.getAsTag(), emoji, country ));
            embed.setColor(Color.GREEN);
            embed.setFooter("–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #" + requestNumber);

            String requestId = "request_" + requestNumber;
            requestStates.put(requestId, "pending");

            event.getJDA().getTextChannelById(targetChannelId).sendMessageEmbeds(embed.build())
                    .setActionRow(
                            Button.success("accept_request_button:" + requestId + ":" + user.getId() + ":" + emoji + ":" + country, "–ü—Ä–∏–Ω—è—Ç—å"),
                            Button.danger("reject_request_button:" + requestId + ":" + user.getId(), "–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                    ).queue();

            event.reply("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #" + requestNumber).setEphemeral(true).queue();
        } else if (modalId.startsWith("reject_reason_modal")) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            String[] parts = modalId.split(":");
            if (parts.length < 3) {
                event.reply("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å ID –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞.").setEphemeral(true).queue();
                return;
            }

            String requestId = parts[1];
            String userId = parts[2];

            ModalMapping reasonMapping = event.getValue("reject_reason_input");
            if (reasonMapping == null) {
                event.reply("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.").setEphemeral(true).queue();
                return;
            }
            String reason = reasonMapping.getAsString();

            Guild guild = event.getGuild();
            if (guild == null) {
                event.reply("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–∏–ª—å–¥–∏—é.").setEphemeral(true).queue();
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–µ—à –∏–ª–∏ API
            guild.retrieveMemberById(userId).queue(member -> {
                if (member == null) {
                    event.reply("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").setEphemeral(true).queue();
                    return;
                }

                User user = member.getUser();

                EmbedBuilder dmEmbed = new EmbedBuilder();
                dmEmbed.setTitle("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");
                dmEmbed.setDescription("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: " + reason);
                dmEmbed.setColor(Color.RED);

                user.openPrivateChannel().queue(channel -> {
                    channel.sendMessageEmbeds(dmEmbed.build()).queue();
                });

                EmbedBuilder channelEmbed = new EmbedBuilder();
                channelEmbed.setTitle("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");
                channelEmbed.setDescription("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ò–≥—Ä–æ–∫ " + member.getEffectiveName() + " –Ω–µ –ø—Ä–∏–Ω—è—Ç. –ü—Ä–∏—á–∏–Ω–∞: " + reason);
                channelEmbed.setColor(Color.RED);

                guild.getTextChannelById(targetChannelId)
                        .sendMessageEmbeds(channelEmbed.build()).queue();

                requestStates.put(requestId, "rejected");
            }, error -> {
                System.err.println("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. " + error.getMessage());
                event.reply("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").setEphemeral(true).queue();
            });
        }
    }

    public void onButtonInteractionForDecision(ButtonInteractionEvent event) {
        String[] parts = event.getComponentId().split(":");
        String action = parts[0];
        String requestId = parts[1];
        String userId = parts[2];

        String requestState = requestStates.get(requestId);
        if (requestState == null) {
            event.reply("–û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
            return;
        }
        if (!requestState.equals("pending")) {
            event.reply("–û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.").setEphemeral(true).queue();
            return;
        }

        Guild guild = event.getGuild();
        if (guild == null) {
            event.reply("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–∏–ª—å–¥–∏—é.").setEphemeral(true).queue();
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–µ—à –∏–ª–∏ API
        guild.retrieveMemberById(userId).queue(member -> {
            if (member == null) {
                event.reply("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").setEphemeral(true).queue();
                return;
            }

            User user = member.getUser();
            String nickname = member.getEffectiveName();

            if (action.equals("accept_request_button")) {
                String emoji = parts[3];
                String country = parts[4];

                if (isUserAlreadyRegistered(guild, user)) {
                    event.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.").setEphemeral(true).queue();
                    return;
                }

                // –ú–µ–Ω—è–µ–º –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å –µ–º–æ–¥–∑–∏
                String newNickname = emoji + " " + country;
                guild.modifyNickname(member, newNickname).queue();

                // –í—ã–¥–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                Role role = guild.getRoleById(roleId);
                if (role != null) {
                    guild.addRoleToMember(member, role).queue(
                            success -> {
                                event.reply("–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞!").setEphemeral(true).queue();
                            },
                            error -> {
                                System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + user.getId() + ": " + error.getMessage());
                                event.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.").setEphemeral(true).queue();
                            }
                    );
                } else {
                    event.reply("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.").setEphemeral(true).queue();
                }

                EmbedBuilder dmEmbed = new EmbedBuilder();
                dmEmbed.setTitle("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞");
                dmEmbed.setDescription("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!");
                dmEmbed.setColor(Color.GREEN);

                user.openPrivateChannel().queue(channel -> {
                    channel.sendMessageEmbeds(dmEmbed.build()).queue();
                });

                EmbedBuilder channelEmbed = new EmbedBuilder();
                channelEmbed.setTitle("–ò–≥—Ä–æ–∫ –ø—Ä–∏–Ω—è—Ç");
                channelEmbed.setDescription("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ò–≥—Ä–æ–∫ " + nickname + " —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç.");
                channelEmbed.setColor(Color.BLUE);

                guild.getTextChannelById(targetChannelId)
                        .sendMessageEmbeds(channelEmbed.build()).queue();

                requestStates.put(requestId, "accepted");

            } else if (action.equals("reject_request_button")) {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                TextInput rejectReasonInput = TextInput.create("reject_reason_input", "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", TextInputStyle.PARAGRAPH)
                        .setPlaceholder("–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º...")
                        .setRequired(true)
                        .build();

                Modal rejectModal = Modal.create("reject_reason_modal:" + requestId + ":" + userId, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏")
                        .addActionRow(rejectReasonInput)
                        .build();

                event.replyModal(rejectModal).queue();
            }
        }, error -> {
            System.err.println("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. " + error.getMessage());
            event.reply("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.").setEphemeral(true).queue();
        });
    }
}
